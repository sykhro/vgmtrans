name: Build and test
on: [push, pull_request]
jobs:
  unix:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-16.04, macos-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: 'refactor'
      - if: matrix.os == 'macos-latest'
        name: "Install macOS dependencies"
        run: |
          brew upgrade gcc || brew install gcc
          brew upgrade ninja || brew install ninja
          brew upgrade cmake || brew install cmake
          brew upgrade cmake || brew install cmake
          brew upgrade qt || brew install qt
          brew upgrade fluid-synth || brew install fluid-synth
          echo ::set-env name=CXX::g++-9
          echo ::set-env name=CC::gcc-9
          echo "::set-env name=BRANCH::$(git rev-parse --abbrev-ref HEAD)"
          echo ::add-path::/usr/local/bin
      - if: matrix.os == 'ubuntu-16.04'
        name: "Install Linux dependencies"
        run: |
          sudo add-apt-repository ppa:beineri/opt-qt-5.12.0-xenial -y
          sudo apt-get update -qq
          sudo apt-get -y install qt512base libfluidsynth-dev ninja-build libgl1-mesa-dev
          echo ::set-env name=CXX::g++-9
          echo ::set-env name=CC::gcc-9
          echo "::set-env name=BRANCH::$(git rev-parse --abbrev-ref HEAD)"
      - name: "Prepare build"
        run: |
          mkdir build
          cd build
          cmake --version
          # Silly hack: by purging these variable we force cmake to use the CXX/CC variables
          cmake -DCMAKE_C_COMPILER="" -DCMAKE_CXX_COMPILER="" -DCMAKE_INSTALL_PREFIX=/usr/bin -DCMAKE_BUILD_TYPE=Release -G Ninja ..
      - name: "Build project"
        run: cmake --build build --config "Release" --parallel
      - name: "Run tests"
        run: ctest -C Release
      - if: matrix.os == 'macos-latest'
        working-directory: "build"
        name: "Package DMG (macOS)"
        run: |
          cp ../data/mame_roms.xml src/vgmtrans-qt/VGMTrans.app/Contents/MacOS/
          /usr/local/opt/qt5/bin/macdeployqt src/vgmtrans-qt/VGMTrans.app -dmg -always-overwrite
          cd src/vgmtrans-qt/
          mv VGMTrans.dmg ../..
      - if: matrix.os == 'macos-latest'
        name: "Upload macOS artifact"
        uses: actions/upload-artifact@v1
        with:
          name: VGMTrans-${{ github.sha }}-${{ env.BRANCH }}-x86_64-${{ runner.os }}.dmg
          path: "build/VGMTrans.dmg"
      - if: matrix.os == 'ubuntu-16.04'
        name: "Make AppImage (Linux)"
        working-directory: "build"
        run: |
          DESTDIR=appdir ninja -j$(nproc) install
          find appdir/
          wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage
          mkdir -p appdir/usr/share
          cp ../data/vgmtrans.desktop appdir/usr/share
          cp ../data/mame_roms.xml appdir/usr/bin
          cp ../src/vgmtrans-qt/resources/images/logo.png appdir/usr/share/default.png
          ./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/vgmtrans.desktop -appimage -qmake=/opt/qt512/bin/qmake
          mv VGMTrans*.AppImage VGMTrans.AppImage
      - if: matrix.os == 'ubuntu-16.04'
        name: "Upload Linux artifact"
        uses: actions/upload-artifact@v1
        with:
          name: VGMTrans-${{ github.sha }}-${{ env.BRANCH }}-x86_64-${{ runner.os }}.AppImage
          path: "build/VGMTrans.AppImage"
  windows:
    runs-on: windows-latest
    name: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: 'refactor'
      - name: "Install dependencies"
        run: |
          git submodule update --init --recursive
          Write-Output "::set-env name=CXX::cl"
          Write-Output "::set-env name=CC::cl"
          Write-Output "::set-env name=BRANCH::$(git rev-parse --abbrev-ref HEAD)"
      - name: "Prepare build"
        run: |
          mkdir build
          cd build
          cmake --version
          cmake -DCMAKE_BUILD_TYPE=Release ..
      - name: "Build project"
        run: cmake --build build --config "Release" --parallel
      - name: "Run tests"
        run: ctest -C Release
      - name: "Package artifact"
        working-directory: build
        run: |
          mkdir deploy
          copy src\vgmtrans-qt\Release\vgmtrans.exe deploy\vgmtrans.exe
          copy ..\data\mame_roms.xml deploy\
          copy ..\externals\win-deps\fluidsynth2-msvc2017-x64\*.dll deploy\
          # Someday windeployqt --release --no-translations --no-angle --no-opengl-sw deploy\vgmtrans.exe
          copy ..\externals\win-deps\qt5-msvc2017-x64\bin\Qt5Core.dll deploy\
          copy ..\externals\win-deps\qt5-msvc2017-x64\bin\Qt5Gui.dll deploy\
          copy ..\externals\win-deps\qt5-msvc2017-x64\bin\Qt5Widgets.dll deploy\
          mkdir deploy\qtdata
          xcopy ..\externals\win-deps\qt5-msvc2017-x64\plugins deploy\qtdata /s /e /h
          Set-Content -Value "[Paths]`nPlugins = ./qtdata" -Path deploy\qt.conf
          7z a "VGMTrans.zip" .\deploy\*
      - name: "Upload artifact"
        uses: actions/upload-artifact@v1
        with:
          name: VGMTrans-${{ github.sha }}-${{ env.BRANCH }}-x86_64-${{ runner.os }}
          path: "build/VGMTrans.zip"
